name: CI_action

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  CI_job:
    runs-on: ubuntu-latest
    
    # ‚úÖ Permissions needed to read artifacts
    permissions:
      contents: read
      actions: read

    # üîµ BigQuery credentials
    env:
      DBT_ENV_SECRET_TYPE: ${{ secrets.DBT_ENV_SECRET_TYPE }} 
      DBT_ENV_SECRET_PROJECT_ID: ${{ secrets.DBT_ENV_SECRET_PROJECT_ID }}
      DBT_ENV_SECRET_PRIVATE_KEY_ID: ${{ secrets.DBT_ENV_SECRET_PRIVATE_KEY_ID }} 
      DBT_ENV_SECRET_PRIVATE_KEY: ${{ secrets.DBT_ENV_SECRET_PRIVATE_KEY }}  
      DBT_ENV_SECRET_CLIENT_EMAIL: ${{ secrets.DBT_ENV_SECRET_CLIENT_EMAIL }}
      DBT_ENV_SECRET_CLIENT_ID: ${{ secrets.DBT_ENV_SECRET_CLIENT_ID }} 
      DBT_ENV_SECRET_AUTH_URI: ${{ secrets.DBT_ENV_SECRET_AUTH_URI }}
      DBT_ENV_SECRET_TOKEN_URI: ${{ secrets.DBT_ENV_SECRET_TOKEN_URI }}
      DBT_ENV_SECRET_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.DBT_ENV_SECRET_AUTH_PROVIDER_X509_CERT_URL }} 
      DBT_ENV_SECRET_CLIENT_X509_CERT_URL: ${{ secrets.DBT_ENV_SECRET_CLIENT_X509_CERT_URL }}

      DBT_TARGET: pr
      # Artifact name that CD pipeline creates
      MANIFEST_ARTIFACT_NAME: dbt-manifest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        # Ensure dbt-requirements.txt includes: dbt-bigquery==1.9.*
        run: pip install -r dbt-requirements.txt

      # ---- Get PR-scoped schema suffix ----
      - name: Get Schema ID
        id: schema_id
        run: echo "SCHEMA_ID=${{ github.event.pull_request.number }}__$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-7 | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV

      # ---- Download manifest from MAIN for slim CI ----
      - name: Download latest manifest artifact
        shell: bash
        run: |
          echo "üîç Fetching artifact list..."
          echo "üîó Repository: ${{ github.repository }}"
          echo "üéØ Looking for artifact: ${{ env.MANIFEST_ARTIFACT_NAME }}"
          
          # Test API access first
          response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" \
              -o artifacts.json)
          
          echo "üì° API Response Code: $response"
          
          if [ "$response" != "200" ]; then
            echo "‚ùå API call failed with code: $response"
            echo "üìÑ Response content:"
            cat artifacts.json
            exit 1
          fi
          
          echo "‚úÖ API call successful"
          echo "üìã Available artifacts:"
          cat artifacts.json | grep -o '"name":"[^"]*"' | head -10

          # Extract correct artifact ID by getting download URL
          artifact_id=$(grep -A10 '"name": "${{ env.MANIFEST_ARTIFACT_NAME }}"' artifacts.json \
            | grep '"archive_download_url":' \
            | head -n1 \
            | sed 's/.*artifacts\/\([0-9]*\)\/zip.*/\1/')

          if [ -z "$artifact_id" ]; then
            echo "‚ùå Artifact '${{ env.MANIFEST_ARTIFACT_NAME }}' not found."
            echo "üìã All available artifacts:"
            cat artifacts.json | jq '.artifacts[].name' 2>/dev/null || echo "jq not available"
            exit 1
          fi

          echo "‚úÖ Found artifact ID: $artifact_id"
          echo "‚¨áÔ∏è Downloading artifact..."

          curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$artifact_id/zip" \
              -o artifact.zip

          unzip -q artifact.zip -d state
          echo "‚úÖ Artifact extracted to ./state/"
          ls -lh state

      - name: Use state manifest if present
        run: |
          if [ -f "./state/manifest.json" ]; then
            cp ./state/manifest.json ./manifest.json
            echo "‚úÖ Using manifest.json from main for state:modified+ and --defer"
          else
            echo "‚ùå No production manifest found; running a full PR build"
          fi

      # ---- dbt steps ----
      - name: dbt debug
        run: |
          dbt debug --target $DBT_TARGET --vars "schema_id: $SCHEMA_ID"

      - name: dbt deps
        run: |
          dbt deps --target $DBT_TARGET --vars "schema_id: $SCHEMA_ID"

      - name: dbt seed first
        run: |
          dbt seed --target $DBT_TARGET --vars "schema_id: $SCHEMA_ID"

      - name: dbt build (slim CI when state is available)
        run: |
          if [ -f "./manifest.json" ]; then
            dbt run -s 'state:modified+' --defer --state ./state --target $DBT_TARGET --vars "schema_id: $SCHEMA_ID"
            dbt test -s 'state:modified+' --defer --state ./state --target $DBT_TARGET --vars "schema_id: $SCHEMA_ID"
          else
            dbt run --target $DBT_TARGET --vars "schema_id: $SCHEMA_ID"
            dbt test --target $DBT_TARGET --vars "schema_id: $SCHEMA_ID"
          fi

      - name: Drop PR schema
        run: |
          dbt run-operation drop_pr_staging_schemas \
            --args '{"project_id": "${{ secrets.DBT_ENV_SECRET_PROJECT_ID }}", "PR_number": "${{ github.event.pull_request.number }}"}' \
            --profiles-dir ./
